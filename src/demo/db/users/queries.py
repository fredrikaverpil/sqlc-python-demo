# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.19.0
# source: queries.sql
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from demo.db.users import models


CREATE_USER = """-- name: create_user \\:one
INSERT INTO users (
    name, email
) VALUES (
    :p1, :p2
)
RETURNING id, name, email
"""


GET_USER = """-- name: get_user \\:one
SELECT id, name, email
FROM users
WHERE id = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_user(self, *, name: Optional[str], email: Optional[str]) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(CREATE_USER), {"p1": name, "p2": email}).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            email=row[2],
        )

    def get_user(self, *, id: int) -> Optional[models.User]:
        row = self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id}).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            email=row[2],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_user(self, *, name: Optional[str], email: Optional[str]) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_USER), {"p1": name, "p2": email})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            email=row[2],
        )

    async def get_user(self, *, id: int) -> Optional[models.User]:
        row = (await self._conn.execute(sqlalchemy.text(GET_USER), {"p1": id})).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            email=row[2],
        )
